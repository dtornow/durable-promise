openapi: 3.0.0
info:
  title: Durable Promise
  version: 1.0.0
  license:
    name: Apache 2.0
    url: https://opensource.org/license/apache-2-0

paths:
  /promises:
    post:
      tags:
        - Promises
      summary: Create promise
      operationId: createPromise
      parameters:
        - in: header
          name: request-id
          description: Unique tracking id
          schema:
            type: string
        - in: header
          name: idempotency-key
          description: Deduplicates requests
          schema:
            type: string
        - in: header
          name: strict
          description: If true, deduplicates only when promise state matches the request
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - id
                - timeout
              properties:
                id:
                  type: string
                timeout:
                  type: integer
                  format: int64
                param:
                  $ref: "#/components/schemas/Value"
                tags:
                  type: object
                  additionalProperties:
                    type: string
      responses:
        200:
          description: Operation deduplicated, promise fetched successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Promise"
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Promise"
        400:
          description: Invalid request
        403:
          description: Forbidden request
        409:
          description: Promise already exists

  /promises/{id}:
    get:
      tags:
        - Promises
      summary: Read promise
      operationId: readPromise
      parameters:
        - in: path
          name: id
          required: true
          description: The promise id
          schema:
            type: string
        - in: header
          name: request-id
          description: Unique tracking id
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Promise"
        400:
          description: Invalid request
        404:
          description: Promise not found

    patch:
      tags:
        - Promises
      summary: Complete promise
      operationId: completePromise
      parameters:
        - in: path
          name: id
          required: true
          description: The promise id
          schema:
            type: string
        - in: header
          name: request-id
          description: Unique tracking id
          schema:
            type: string
        - in: header
          name: idempotency-key
          description: Deduplicates requests
          schema:
            type: string
        - in: header
          name: strict
          description: If true, deduplicates only when promise state matches the request
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - state
              properties:
                state:
                  type: string
                  enum:
                    - RESOLVED
                    - REJECTED
                    - REJECTED_CANCELED
                value:
                  $ref: "#/components/schemas/Value"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Promise"
        400:
          description: Invalid request
        403:
          description: Forbidden request
        404:
          description: Promise not found

  /callbacks:
    post:
      tags:
        - Callbacks
      summary: Create callback
      operationId: createCallback
      parameters:
        - in: header
          name: request-id
          description: Unique tracking id
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - id
                - promiseId
                - rootPromiseId
                - timeout
                - recv
              properties:
                id:
                  type: string
                promiseId:
                  type: string
                rootPromiseId:
                  type: string
                timeout:
                  type: integer
                  format: int64
                recv:
                  $ref: "#/components/schemas/Recv"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  promise:
                    $ref: "#/components/schemas/Promise"
        201:
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  callback:
                    $ref: "#/components/schemas/Callback"
                  promise:
                    $ref: "#/components/schemas/Promise"
        404:
          description: Promise not found

components:
  schemas:
    Promise:
      type: object
      required:
        - id
        - state
        - timeout
        - param
        - value
        - tags
      properties:
        id:
          type: string
        state:
          type: string
          enum:
            - PENDING
            - RESOLVED
            - REJECTED
            - REJECTED_CANCELED
            - REJECTED_TIMEDOUT
        timeout:
          type: integer
          format: int64
        param:
          $ref: "#/components/schemas/Value"
        value:
          $ref: "#/components/schemas/Value"
        tags:
          type: object
          additionalProperties:
            type: string
        idempotencyKeyForCreate:
          type: string
          readOnly: true
        idempotencyKeyForComplete:
          type: string
          readOnly: true
        createdOn:
          type: integer
          format: int64
        completedOn:
          type: integer
          format: int64

    Value:
      type: object
      properties:
        headers:
          type: object
          additionalProperties:
            type: string
        data:
          type: string

    Callback:
      type: object
      required:
        - id
        - promiseId
        - timeout
      properties:
        id:
          type: string
        promiseId:
          type: string
        timeout:
          type: integer
          format: int64
        createdOn:
          type: integer
          format: int64

    Recv:
      oneOf:
        - type: object
          required:
            - type
            - data
          properties:
            type:
              type: string
            data:
              type: object
              additionalProperties: true
        - type: string
