# add original + add request-id

openapi: 3.0.0
info:
  title: Promise API
  description: Manage promises
  version: 1.0.0
paths:
  /promises:
    post:
      tags:
        - Promises
      summary: Create a promise
      operationId: createPromise
      requestBody:
        $ref: "#/components/requestBodies/CreatePromise"
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Promise"
    get:
      tags:
        - Promises
      summary: List promises
      operationId: listPromises
      parameters:
        - $ref: "#/components/parameters/QueryFilters"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PromiseList"

  /promises/{id}:
    get:
      tags:
        - Promises
      summary: Get a promise
      operationId: getPromise
      parameters:
        - $ref: "#/components/parameters/PathId"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Promise"
    patch:
      tags:
        - Promises
      summary: Update promise state
      operationId: updatePromiseState
      parameters:
        - $ref: "#/components/parameters/PathId"
      requestBody:
        $ref: "#/components/requestBodies/UpdatePromiseState"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Promise"
    delete:
      tags:
        - Promises
      summary: Cancel promise
      operationId: cancelPromise
      parameters:
        - $ref: "#/components/parameters/PathId"
      responses:
        204:
          description: No Content

components:
  parameters:
    QueryFilters:
      name: filters
      in: query
      style: form # Use form style to group params
      explode: true
      schema:
        type: object
        properties:
          q:
            type: string
            description: Free text query string
          state:
            $ref: "#/components/schemas/PromiseState"
          limit:
            type: integer
            description: Number of results
          cursor:
            type: string
            description: Cursor for pagination

    PathId:
      name: id
      in: path
      required: true
      description: The promise ID
      schema:
        type: string

  requestBodies:
    CreatePromise:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Promise"

    UpdatePromiseState:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/PromiseStateUpdate"

  # review headers
  headers:
    idempotency-key:
      description: Deduplicates multiple requests
      schema:
        type: string

    strict:
      description: If true, deduplicates only when promise is pending
      schema:
        type: boolean

    request-id:
      description: Unique ID for each request
      schema:
        type: string

    CommonHeaders:
      schema:
        type: object
        properties:
          IdempotencyKey:
            $ref: "#/components/headers/idempotency-key"
          StrictMode:
            $ref: "#/components/headers/strict"
          RequestId:
            $ref: "#/components/headers/request-id"

  schemas:
    Promise:
      type: object
      properties:
        id:
          type: string
        state:
          $ref: "#/components/schemas/PromiseState"
        param:
          $ref: "#/components/schemas/Value"
        value:
          $ref: "#/components/schemas/Value"
        timeout:
          type: integer
          format: int64
        idempotencyKeyForCreate:
          type: string
          readOnly: true
        idempotencyKeyForComplete:
          type: string
          readOnly: true
        createdOn:
          type: integer
          readOnly: true
        completedOn:
          type: integer
          readOnly: true
        tags:
          type: object
          additionalProperties:
            type: string

    PromiseState:
      type: string
      enum:
        - PENDING
        - RESOLVED
        - REJECTED
        - REJECTED_CANCELED
        - REJECTED_TIMEDOUT

    PromiseStateUpdate:
      type: object
      properties:
        state:
          $ref: "#/components/schemas/PromiseState"

    Value:
      type: object
      properties:
        data:
          type: string
        headers:
          type: object
          additionalProperties:
            type: string

    PromiseList:
      type: array
      items:
        $ref: "#/components/schemas/Promise"
